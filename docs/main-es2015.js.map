{"version":3,"sources":["/Users/horie/src/github.com/is2ei/ngx-noty/dist/ngx-noty/fesm2015/ngx-noty.js","./$_lazy_route_resource lazy namespace object","./src/app/app.component.html","./src/app/app.component.ts","./src/app/app.module.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["import { __decorate } from 'tslib';\nimport Noty from 'noty';\nimport { ɵɵdefineInjectable, Injectable, Component, NgModule } from '@angular/core';\n\nlet NgxNotyService = class NgxNotyService {\n    constructor() {\n    }\n    show(options) {\n        const noty = new Noty(options);\n        noty.show();\n    }\n};\nNgxNotyService.ɵprov = ɵɵdefineInjectable({ factory: function NgxNotyService_Factory() { return new NgxNotyService(); }, token: NgxNotyService, providedIn: \"root\" });\nNgxNotyService = __decorate([\n    Injectable({\n        providedIn: 'root'\n    })\n], NgxNotyService);\n\nlet NgxNotyComponent = class NgxNotyComponent {\n    constructor() { }\n    ngOnInit() {\n    }\n};\nNgxNotyComponent = __decorate([\n    Component({\n        selector: 'lib-ngx-noty',\n        template: `\n    <p>\n      ngx-noty works!\n    </p>\n  `\n    })\n], NgxNotyComponent);\n\nlet NgxNotyModule = class NgxNotyModule {\n};\nNgxNotyModule = __decorate([\n    NgModule({\n        declarations: [NgxNotyComponent],\n        imports: [],\n        exports: [NgxNotyComponent]\n    })\n], NgxNotyModule);\n\n/*\n * Public API Surface of ngx-noty\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxNotyComponent, NgxNotyModule, NgxNotyService };\n//# sourceMappingURL=ngx-noty.js.map\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","<h2>This is demo site for ngx-noty</h2>\n\n<div>\n  <button (click)=\"alert()\">Alert</button>\n</div>\n\n<div>\n  <button (click)=\"success()\">Success</button>\n</div>\n\n<div>\n  <button (click)=\"warning()\">Warning</button>\n</div>\n\n<div>\n  <button (click)=\"error()\">Error</button>\n</div>\n\n<div>\n  <button (click)=\"info()\">Info</button>\n</div>\n","import { Component } from '@angular/core';\nimport { NgxNotyService } from 'ngx-noty';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  private ngxNotyService: NgxNotyService;\n\n  constructor(\n    ngxNotyService: NgxNotyService\n  ) {\n    this.ngxNotyService = ngxNotyService;\n  }\n\n  alert(): void {\n    this.ngxNotyService.show({\n      text: `Best check yo self, you're not looking too good.`,\n      type: 'alert'\n    });\n  }\n\n  success(): void {\n    this.ngxNotyService.show({\n      text: `You successfully read this important alert message.`,\n      type: 'success'\n    });\n  }\n\n  warning(): void {\n    this.ngxNotyService.show({\n      text: `Best check yo self, you're not looking too good.`,\n      type: 'warning'\n    });\n  }\n\n  error(): void {\n    this.ngxNotyService.show({\n      text: `Change a few things up and try submitting again.`,\n      type: 'error'\n    });\n  }\n\n  info(): void {\n    this.ngxNotyService.show({\n      text: `This alert needs your attention, but it's not super important.`,\n      type: 'info'\n    });\n  }\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { NgxNotyModule } from 'ngx-noty';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    NgxNotyModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}