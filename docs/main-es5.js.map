{"version":3,"sources":["webpack:///Users/horie/src/github.com/is2ei/ngx-noty/dist/ngx-noty/fesm2015/ngx-noty.js","webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.html","webpack:///src/app/app.component.ts","webpack:///src/app/app.module.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["NgxNotyService","noty","show","ɵprov","factory","NgxNotyService_Factory","token","providedIn","NgxNotyComponent","selector","template","NgxNotyModule","declarations","imports","exports","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","id","AppComponent","ngxNotyService","AppModule","environment","production","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { __decorate } from 'tslib';\nimport Noty from 'noty';\nimport { ɵɵdefineInjectable, Injectable, Component, NgModule } from '@angular/core';\n\nlet NgxNotyService = class NgxNotyService {\n    constructor() {\n    }\n    show() {\n        const noty = new Noty({});\n        noty.show();\n    }\n};\nNgxNotyService.ɵprov = ɵɵdefineInjectable({ factory: function NgxNotyService_Factory() { return new NgxNotyService(); }, token: NgxNotyService, providedIn: \"root\" });\nNgxNotyService = __decorate([\n    Injectable({\n        providedIn: 'root'\n    })\n], NgxNotyService);\n\nlet NgxNotyComponent = class NgxNotyComponent {\n    constructor() { }\n    ngOnInit() {\n    }\n};\nNgxNotyComponent = __decorate([\n    Component({\n        selector: 'lib-ngx-noty',\n        template: `\n    <p>\n      ngx-noty works!\n    </p>\n  `\n    })\n], NgxNotyComponent);\n\nlet NgxNotyModule = class NgxNotyModule {\n};\nNgxNotyModule = __decorate([\n    NgModule({\n        declarations: [NgxNotyComponent],\n        imports: [],\n        exports: [NgxNotyComponent]\n    })\n], NgxNotyModule);\n\n/*\n * Public API Surface of ngx-noty\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxNotyComponent, NgxNotyModule, NgxNotyService };\n//# sourceMappingURL=ngx-noty.js.map\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","<button (click)=\"popup()\">Popup</button>\n","import { Component } from '@angular/core';\nimport { NgxNotyService } from 'ngx-noty';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  private ngxNotyService: NgxNotyService;\n\n  constructor(\n    ngxNotyService: NgxNotyService\n  ) {\n    this.ngxNotyService = ngxNotyService;\n  }\n\n  popup(): void {\n    this.ngxNotyService.show();\n  }\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { NgxNotyModule } from 'ngx-noty';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    NgxNotyModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}